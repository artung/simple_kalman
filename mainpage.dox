/*!
\mainpage simple_kalman

\section linear-kalman Kalman for linear system
\subsection definition Definition

A linear system, described by:
\f[x_k = Ax_{k-1} + Bu_{k-1} + v_{k-1}\f]
\f[z_k = Hx_k + w_k\f]
where:\n
\f$v\f$ is the process noise (Gaussian with covariance Q)\n  
\f$w\f$ is the measurement noise (Gaussian with covariance R)\n 
\f$A\f$ is the system matrix\n
\f$B\f$ is the input matrix\n
\f$H\f$ is the output matrix\n
\f$x\f$ is the state vector\n
\f$z\f$ is the output vector\n
\f$u\f$ is the input vector\n\n
The noise covariance matrices must follow these conditions:\n
\f[Q = Q^T\f]
\f[R = R^T\f]


\subsection example Example

As provided in main1.cpp, we will solve <a href="http://www.mathworks.com/matlabcentral/fileexchange/18465-learning-the-kalman-filter-in-simulink-v2-1/content/html/runkalmanfilter.html">the car voltmeter</a> using this library. The system model is given as: 

\f[x_k = x_{k-1} + 12 + v_{k-1}\f]
\f[z_k = x_k + w_á¸³\f]

Therefore, we can then write:  \f$A = 0\f$, \f$B = 0\f$, \f$H = 1\f$ and \f$u = 12\f$. Both noise covariances (\f$Q\f$ and \f$R\f$) are 2. 

\code{.cpp}
mat A(1,1), B(1,1), H(1,1), Q(1,1), R(1,1);   
A(0, 0) = 0;
B(0, 0) = 1;
Q(0, 0) = 2;
H(0, 0) = 1;
R(0, 0) = 2;
\endcode

The first line of the code above is used to create matrices with predefined dimensions. For this purpose, Armadillo library is used. In the following row until the last row, we assign the value of each matrix accordingly.

\code
SimpleKalman kalman;
kalman.InitSystem(A, B, H, Q, R);
\endcode

Next, we create an instance of class SimpleKalman and initialize it with the previous matrices of \f$A\f$, \f$B\f$, \f$Q\f$, \f$H\f$, and \f$R\f$.

\code 
colvec x(1), x_m(1);
colvec u(1);
  
for (int k = 0; k < 100; k++) {
  u(0,0) = 12;
  kalman.Kalmanf(x, x_m, u);
  ...
}
\endcode

Before executing the Kalman iteration, we need to prepare 2 variables, which are: \f$x\f$ and \f$x_m\f$. \f$x\f$ will be used to store the true states and \f$x_m\f$ will be used to store the estimated states by the Kalman.


\section non-linear-kalman Extended Kalman for nonlinear system
\subsection definition Definition

A non-linear system is described by:
\f[x_k = f(x_{k-1}, u_{k-1}, k) + v_{k-1}\f]
\f[z_k = h(x_k, u_k, k) + w_k\f]
where:\n 
\f$f\f$ is the dynamic model of the system\n
\f$h\f$ is the measurement model of the system\n
\f$v\f$ is the process noise (Gaussian with covariance Q)\n  
\f$w\f$ is the measurement noise (Gaussian with covariance R)\n 
\f$x\f$ is the state vector\n
\f$z\f$ is the output vector\n
\f$u\f$ is the input vector\n\n
The noise covariance matrices must follow these conditions:\n
\f[Q = Q^T\f]
\f[R = R^T\f]

\subsection example Example
As provided in main4.cpp, the example for the EKF is adapted from this  <a href="http://www.mathworks.com/matlabcentral/fileexchange/18465-learning-the-kalman-filter-in-simulink-v2-1/content/html/runkalmanfilter.html">MATLAB Central page.</a> The nonlinear system is described as:

\f[ f = \begin{bmatrix} sin(x_2(k-1))(k-1) \\ x_2(k-1) \end{bmatrix} \f]
\f[ h = \begin{bmatrix} x_1(k) \\ x_2(k) \end{bmatrix} \f]

Since Extended Kalamn is meant to work with nonlinear system, we can not extract matrix \f$A\f$ and matrix \f$H\f$ as we can do from a linear system. In Extended Kalman, matrix \f$f\f$ and matrix \f$h\f$ are matrix of functions instead of matrix of constants. To accomodate this, Class EKF needs to be first derived so that we can define our own functions for those two matrices.

\code
class MyEKF: public EKF
{
public:  
  virtual colvec f(const colvec& x, const colvec& u, const int k) {
    colvec xk(nOutputs_);
    xk(0) = sin(x(1) * k);
    xk(1) = x(1);
    return xk;
  }
  
  virtual colvec h(const colvec& x, const colvec& u, const int k) {
    colvec zk(nOutputs_);
    zk(0) = x(0);
    zk(1) = x(1);
    return zk;
  }
};
\endcode

Next steps are quite the same as shown in the previous example for the linear Kalman:

\code
...
int n_states = 2;
int n_outputs = 2;
mat Q(2, 2);
mat R(2, 2);

Q << 0.001 << 0    << endr
  << 0     << 0    << endr;
  
R << 0.1   << 0    << endr
  <<   0   << 0.01 << endr;

colvec x0(3);
x0 << 0 << 3 * M_PI / 500;

colvec x, x_m;
colvec u;

MyEKF myekf;
myekf.InitSystem(n_states, n_outputs, Q, R);
myekf.InitSystemState(x0);

for (int k = 0; k < 1000; k ++) {
  myekf.EKalmanf(x, x_m, u, k);
  ...
}

\endcode

  

*/
